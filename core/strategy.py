#!/usr/bin/python
# -*- coding: utf-8 -*-


import queue
import datetime
import numpy as np
import pandas as pd
from queue import Queue
from abc import ABCMeta, abstractmethod

from quant.core.event import DataEvent, SignalEvent
from quant.core.datahandler import DataHandler


class Strategy(object, metaclass=ABCMeta):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars 
    (OHLCV) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to where the data came from,
    since it obtains the bar tuples from a queue object.
    """

    def __init__(self, datahandler:DataHandler, events:Queue):
        self.datahandler:DataHandler=datahandler
        self.events:Queue = events

    @abstractmethod
    def on_data(self, event:DataEvent):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")

